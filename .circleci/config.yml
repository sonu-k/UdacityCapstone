version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch #same docker base as the project
    steps:
      - checkout
      - restore_cache: #download and cache dependencies
          keys:
            - v1-dependencies-{{ checksum "requirements.txt"}}
            - v1-dependencies- #fallback to using the latest cache if no exact match is found
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            make install
            # Installing Hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&
            chmod +x /bin/hadolint 
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt"}}

  create-upload-container:
    machine: true
    steps:
      - checkout
      - run:
          name: build and upload docker container
          no_output_timeout: 30m
          command: |
            ./run_docker.sh
            ./upload_docker.sh
        
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          The name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          
          
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get pods
            kubectl get services
            kubectl describe pods
          name: Test cluster
          
  deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yml
          resource-name: deployment/udacitycapstonedeployment
          
          
workflows:
  default:
    jobs:
      # - build
      # - create-cluster:
      #     cluster-name: udacitycapstone
      #     requires:
      #       - build
      # - test-cluster:
      #     cluster-name: udacitycapstone
      #     requires:
      #       - create-cluster
      # - create-upload-container:
      #     requires:
      #       - test-cluster
      - deployment:
          cluster-name: udacitycapstone
          # requires:
          #   - test-cluster
            
            
            
      